// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datanodeproto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataNodeProto {

  /// <summary>Holder for reflection information generated from datanodeproto.proto</summary>
  public static partial class DatanodeprotoReflection {

    #region Descriptor
    /// <summary>File descriptor for datanodeproto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DatanodeprotoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNkYXRhbm9kZXByb3RvLnByb3RvEg1EYXRhTm9kZVByb3RvIisKEEhlYXJ0",
            "QmVhdFJlcXVlc3QSFwoPaGVhcnRCZWF0U3RyaW5nGAEgASgJIkIKEUhlYXJ0",
            "QmVhdFJlc3BvbnNlEi0KBGNtZHMYASADKAsyHy5EYXRhTm9kZVByb3RvLkRh",
            "dGFub2RlQ29tbWFuZHMiZgoSQmxvY2tSZXBvcnRyZXF1ZXN0EiMKBm5vZGVp",
            "ZBgBIAEoCzITLkRhdGFOb2RlUHJvdG8uVVVJRBIrCglibG9ja2xpc3QYAiAB",
            "KAsyGC5EYXRhTm9kZVByb3RvLkJsb2NrTGlzdCJkCglEYXRhQmxvY2sSJAoH",
            "YmxvY2tpZBgBIAEoCzITLkRhdGFOb2RlUHJvdG8uVVVJRBIjCgZub2RlaWQY",
            "AiABKAsyEy5EYXRhTm9kZVByb3RvLlVVSUQSDAoEZGF0YRgDIAEoDCKvAQoQ",
            "RGF0YW5vZGVDb21tYW5kcxI1CgdjbWRUeXBlGAEgASgOMiQuRGF0YU5vZGVQ",
            "cm90by5EYXRhbm9kZUNvbW1hbmRzLlR5cGUSMAoGYmxrQ21kGAIgASgLMiAu",
            "RGF0YU5vZGVQcm90by5CbG9ja0NvbW1hbmRQcm90byIyCgRUeXBlEhAKDEJs",
            "b2NrQ29tbWFuZBAAEhgKFEJsb2NrUmVjb3ZlcnlDb21tYW5kEAEioQEKEUJs",
            "b2NrQ29tbWFuZFByb3RvEjcKBmFjdGlvbhgBIAEoDjInLkRhdGFOb2RlUHJv",
            "dG8uQmxvY2tDb21tYW5kUHJvdG8uQWN0aW9uEisKCWJsb2NrbGlzdBgCIAEo",
            "CzIYLkRhdGFOb2RlUHJvdG8uQmxvY2tMaXN0IiYKBkFjdGlvbhIMCghUUkFO",
            "U0ZFUhAAEg4KCklOVkFMSURBVEUQASIxCglCbG9ja0xpc3QSJAoHYmxvY2tp",
            "ZBgBIAMoCzITLkRhdGFOb2RlUHJvdG8uVVVJRCJtCg5TdGF0dXNSZXNwb25z",
            "ZRI2CgR0eXBlGAEgASgOMiguRGF0YU5vZGVQcm90by5TdGF0dXNSZXNwb25z",
            "ZS5TdGF0dXNUeXBlIiMKClN0YXR1c1R5cGUSCwoHU3VjY2VzcxAAEggKBEZh",
            "aWwQASIVCgRVVUlEEg0KBXZhbHVlGAEgASgJMo0CCg9EYXRhTm9kZVNlcnZp",
            "Y2USVAoNU2VuZEhlYXJ0QmVhdBIfLkRhdGFOb2RlUHJvdG8uSGVhcnRCZWF0",
            "UmVxdWVzdBogLkRhdGFOb2RlUHJvdG8uSGVhcnRCZWF0UmVzcG9uc2UiABJV",
            "Cg9TZW5kQmxvY2tSZXBvcnQSIS5EYXRhTm9kZVByb3RvLkJsb2NrUmVwb3J0",
            "cmVxdWVzdBodLkRhdGFOb2RlUHJvdG8uU3RhdHVzUmVzcG9uc2UiABJNChBG",
            "b3J3YXJkRGF0YUJsb2NrEhguRGF0YU5vZGVQcm90by5EYXRhQmxvY2saHS5E",
            "YXRhTm9kZVByb3RvLlN0YXR1c1Jlc3BvbnNlIgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.HeartBeatRequest), global::DataNodeProto.HeartBeatRequest.Parser, new[]{ "HeartBeatString" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.HeartBeatResponse), global::DataNodeProto.HeartBeatResponse.Parser, new[]{ "Cmds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.BlockReportrequest), global::DataNodeProto.BlockReportrequest.Parser, new[]{ "Nodeid", "Blocklist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.DataBlock), global::DataNodeProto.DataBlock.Parser, new[]{ "Blockid", "Nodeid", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.DatanodeCommands), global::DataNodeProto.DatanodeCommands.Parser, new[]{ "CmdType", "BlkCmd" }, null, new[]{ typeof(global::DataNodeProto.DatanodeCommands.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.BlockCommandProto), global::DataNodeProto.BlockCommandProto.Parser, new[]{ "Action", "Blocklist" }, null, new[]{ typeof(global::DataNodeProto.BlockCommandProto.Types.Action) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.BlockList), global::DataNodeProto.BlockList.Parser, new[]{ "Blockid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.StatusResponse), global::DataNodeProto.StatusResponse.Parser, new[]{ "Type" }, null, new[]{ typeof(global::DataNodeProto.StatusResponse.Types.StatusType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.UUID), global::DataNodeProto.UUID.Parser, new[]{ "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class HeartBeatRequest : pb::IMessage<HeartBeatRequest> {
    private static readonly pb::MessageParser<HeartBeatRequest> _parser = new pb::MessageParser<HeartBeatRequest>(() => new HeartBeatRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRequest(HeartBeatRequest other) : this() {
      heartBeatString_ = other.heartBeatString_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRequest Clone() {
      return new HeartBeatRequest(this);
    }

    /// <summary>Field number for the "heartBeatString" field.</summary>
    public const int HeartBeatStringFieldNumber = 1;
    private string heartBeatString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeartBeatString {
      get { return heartBeatString_; }
      set {
        heartBeatString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeartBeatString != other.HeartBeatString) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeartBeatString.Length != 0) hash ^= HeartBeatString.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeartBeatString.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HeartBeatString);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeartBeatString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeartBeatString);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatRequest other) {
      if (other == null) {
        return;
      }
      if (other.HeartBeatString.Length != 0) {
        HeartBeatString = other.HeartBeatString;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            HeartBeatString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeartBeatResponse : pb::IMessage<HeartBeatResponse> {
    private static readonly pb::MessageParser<HeartBeatResponse> _parser = new pb::MessageParser<HeartBeatResponse>(() => new HeartBeatResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatResponse(HeartBeatResponse other) : this() {
      cmds_ = other.cmds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatResponse Clone() {
      return new HeartBeatResponse(this);
    }

    /// <summary>Field number for the "cmds" field.</summary>
    public const int CmdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataNodeProto.DatanodeCommands> _repeated_cmds_codec
        = pb::FieldCodec.ForMessage(10, global::DataNodeProto.DatanodeCommands.Parser);
    private readonly pbc::RepeatedField<global::DataNodeProto.DatanodeCommands> cmds_ = new pbc::RepeatedField<global::DataNodeProto.DatanodeCommands>();
    /// <summary>
    /// Returned commands can be null
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataNodeProto.DatanodeCommands> Cmds {
      get { return cmds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cmds_.Equals(other.cmds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cmds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cmds_.WriteTo(output, _repeated_cmds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cmds_.CalculateSize(_repeated_cmds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatResponse other) {
      if (other == null) {
        return;
      }
      cmds_.Add(other.cmds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cmds_.AddEntriesFrom(input, _repeated_cmds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockReportrequest : pb::IMessage<BlockReportrequest> {
    private static readonly pb::MessageParser<BlockReportrequest> _parser = new pb::MessageParser<BlockReportrequest>(() => new BlockReportrequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockReportrequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockReportrequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockReportrequest(BlockReportrequest other) : this() {
      Nodeid = other.nodeid_ != null ? other.Nodeid.Clone() : null;
      Blocklist = other.blocklist_ != null ? other.Blocklist.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockReportrequest Clone() {
      return new BlockReportrequest(this);
    }

    /// <summary>Field number for the "nodeid" field.</summary>
    public const int NodeidFieldNumber = 1;
    private global::DataNodeProto.UUID nodeid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.UUID Nodeid {
      get { return nodeid_; }
      set {
        nodeid_ = value;
      }
    }

    /// <summary>Field number for the "blocklist" field.</summary>
    public const int BlocklistFieldNumber = 2;
    private global::DataNodeProto.BlockList blocklist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.BlockList Blocklist {
      get { return blocklist_; }
      set {
        blocklist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockReportrequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockReportrequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Nodeid, other.Nodeid)) return false;
      if (!object.Equals(Blocklist, other.Blocklist)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nodeid_ != null) hash ^= Nodeid.GetHashCode();
      if (blocklist_ != null) hash ^= Blocklist.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nodeid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Nodeid);
      }
      if (blocklist_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Blocklist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nodeid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nodeid);
      }
      if (blocklist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blocklist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockReportrequest other) {
      if (other == null) {
        return;
      }
      if (other.nodeid_ != null) {
        if (nodeid_ == null) {
          nodeid_ = new global::DataNodeProto.UUID();
        }
        Nodeid.MergeFrom(other.Nodeid);
      }
      if (other.blocklist_ != null) {
        if (blocklist_ == null) {
          blocklist_ = new global::DataNodeProto.BlockList();
        }
        Blocklist.MergeFrom(other.Blocklist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (nodeid_ == null) {
              nodeid_ = new global::DataNodeProto.UUID();
            }
            input.ReadMessage(nodeid_);
            break;
          }
          case 18: {
            if (blocklist_ == null) {
              blocklist_ = new global::DataNodeProto.BlockList();
            }
            input.ReadMessage(blocklist_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataBlock : pb::IMessage<DataBlock> {
    private static readonly pb::MessageParser<DataBlock> _parser = new pb::MessageParser<DataBlock>(() => new DataBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlock(DataBlock other) : this() {
      Blockid = other.blockid_ != null ? other.Blockid.Clone() : null;
      Nodeid = other.nodeid_ != null ? other.Nodeid.Clone() : null;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlock Clone() {
      return new DataBlock(this);
    }

    /// <summary>Field number for the "blockid" field.</summary>
    public const int BlockidFieldNumber = 1;
    private global::DataNodeProto.UUID blockid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.UUID Blockid {
      get { return blockid_; }
      set {
        blockid_ = value;
      }
    }

    /// <summary>Field number for the "nodeid" field.</summary>
    public const int NodeidFieldNumber = 2;
    private global::DataNodeProto.UUID nodeid_;
    /// <summary>
    /// Remaining nodes to forward data to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.UUID Nodeid {
      get { return nodeid_; }
      set {
        nodeid_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Blockid, other.Blockid)) return false;
      if (!object.Equals(Nodeid, other.Nodeid)) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (blockid_ != null) hash ^= Blockid.GetHashCode();
      if (nodeid_ != null) hash ^= Nodeid.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (blockid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Blockid);
      }
      if (nodeid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Nodeid);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (blockid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blockid);
      }
      if (nodeid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nodeid);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataBlock other) {
      if (other == null) {
        return;
      }
      if (other.blockid_ != null) {
        if (blockid_ == null) {
          blockid_ = new global::DataNodeProto.UUID();
        }
        Blockid.MergeFrom(other.Blockid);
      }
      if (other.nodeid_ != null) {
        if (nodeid_ == null) {
          nodeid_ = new global::DataNodeProto.UUID();
        }
        Nodeid.MergeFrom(other.Nodeid);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (blockid_ == null) {
              blockid_ = new global::DataNodeProto.UUID();
            }
            input.ReadMessage(blockid_);
            break;
          }
          case 18: {
            if (nodeid_ == null) {
              nodeid_ = new global::DataNodeProto.UUID();
            }
            input.ReadMessage(nodeid_);
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Comands sent back from namenode is response to heartbeat
  /// </summary>
  public sealed partial class DatanodeCommands : pb::IMessage<DatanodeCommands> {
    private static readonly pb::MessageParser<DatanodeCommands> _parser = new pb::MessageParser<DatanodeCommands>(() => new DatanodeCommands());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatanodeCommands> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatanodeCommands() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatanodeCommands(DatanodeCommands other) : this() {
      cmdType_ = other.cmdType_;
      BlkCmd = other.blkCmd_ != null ? other.BlkCmd.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatanodeCommands Clone() {
      return new DatanodeCommands(this);
    }

    /// <summary>Field number for the "cmdType" field.</summary>
    public const int CmdTypeFieldNumber = 1;
    private global::DataNodeProto.DatanodeCommands.Types.Type cmdType_ = 0;
    /// <summary>
    /// Type of the command
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.DatanodeCommands.Types.Type CmdType {
      get { return cmdType_; }
      set {
        cmdType_ = value;
      }
    }

    /// <summary>Field number for the "blkCmd" field.</summary>
    public const int BlkCmdFieldNumber = 2;
    private global::DataNodeProto.BlockCommandProto blkCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.BlockCommandProto BlkCmd {
      get { return blkCmd_; }
      set {
        blkCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatanodeCommands);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatanodeCommands other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdType != other.CmdType) return false;
      if (!object.Equals(BlkCmd, other.BlkCmd)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdType != 0) hash ^= CmdType.GetHashCode();
      if (blkCmd_ != null) hash ^= BlkCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CmdType);
      }
      if (blkCmd_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlkCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CmdType);
      }
      if (blkCmd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlkCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatanodeCommands other) {
      if (other == null) {
        return;
      }
      if (other.CmdType != 0) {
        CmdType = other.CmdType;
      }
      if (other.blkCmd_ != null) {
        if (blkCmd_ == null) {
          blkCmd_ = new global::DataNodeProto.BlockCommandProto();
        }
        BlkCmd.MergeFrom(other.BlkCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            cmdType_ = (global::DataNodeProto.DatanodeCommands.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (blkCmd_ == null) {
              blkCmd_ = new global::DataNodeProto.BlockCommandProto();
            }
            input.ReadMessage(blkCmd_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DatanodeCommands message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("BlockCommand")] BlockCommand = 0,
        [pbr::OriginalName("BlockRecoveryCommand")] BlockRecoveryCommand = 1,
      }

    }
    #endregion

  }

  public sealed partial class BlockCommandProto : pb::IMessage<BlockCommandProto> {
    private static readonly pb::MessageParser<BlockCommandProto> _parser = new pb::MessageParser<BlockCommandProto>(() => new BlockCommandProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockCommandProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockCommandProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockCommandProto(BlockCommandProto other) : this() {
      action_ = other.action_;
      Blocklist = other.blocklist_ != null ? other.Blocklist.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockCommandProto Clone() {
      return new BlockCommandProto(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::DataNodeProto.BlockCommandProto.Types.Action action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.BlockCommandProto.Types.Action Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "blocklist" field.</summary>
    public const int BlocklistFieldNumber = 2;
    private global::DataNodeProto.BlockList blocklist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.BlockList Blocklist {
      get { return blocklist_; }
      set {
        blocklist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockCommandProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockCommandProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (!object.Equals(Blocklist, other.Blocklist)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (blocklist_ != null) hash ^= Blocklist.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      if (blocklist_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Blocklist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (blocklist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blocklist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockCommandProto other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.blocklist_ != null) {
        if (blocklist_ == null) {
          blocklist_ = new global::DataNodeProto.BlockList();
        }
        Blocklist.MergeFrom(other.Blocklist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            action_ = (global::DataNodeProto.BlockCommandProto.Types.Action) input.ReadEnum();
            break;
          }
          case 18: {
            if (blocklist_ == null) {
              blocklist_ = new global::DataNodeProto.BlockList();
            }
            input.ReadMessage(blocklist_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlockCommandProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Action {
        /// <summary>
        /// Transfer blocks to another datanode
        /// </summary>
        [pbr::OriginalName("TRANSFER")] Transfer = 0,
        /// <summary>
        /// Invalidate blocks
        /// </summary>
        [pbr::OriginalName("INVALIDATE")] Invalidate = 1,
      }

    }
    #endregion

  }

  public sealed partial class BlockList : pb::IMessage<BlockList> {
    private static readonly pb::MessageParser<BlockList> _parser = new pb::MessageParser<BlockList>(() => new BlockList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList(BlockList other) : this() {
      blockid_ = other.blockid_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList Clone() {
      return new BlockList(this);
    }

    /// <summary>Field number for the "blockid" field.</summary>
    public const int BlockidFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataNodeProto.UUID> _repeated_blockid_codec
        = pb::FieldCodec.ForMessage(10, global::DataNodeProto.UUID.Parser);
    private readonly pbc::RepeatedField<global::DataNodeProto.UUID> blockid_ = new pbc::RepeatedField<global::DataNodeProto.UUID>();
    /// <summary>
    /// Blocks stored on datanode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataNodeProto.UUID> Blockid {
      get { return blockid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blockid_.Equals(other.blockid_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blockid_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blockid_.WriteTo(output, _repeated_blockid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blockid_.CalculateSize(_repeated_blockid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockList other) {
      if (other == null) {
        return;
      }
      blockid_.Add(other.blockid_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            blockid_.AddEntriesFrom(input, _repeated_blockid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusResponse : pb::IMessage<StatusResponse> {
    private static readonly pb::MessageParser<StatusResponse> _parser = new pb::MessageParser<StatusResponse>(() => new StatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse(StatusResponse other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse Clone() {
      return new StatusResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DataNodeProto.StatusResponse.Types.StatusType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.StatusResponse.Types.StatusType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::DataNodeProto.StatusResponse.Types.StatusType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StatusResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StatusType {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("Fail")] Fail = 1,
      }

    }
    #endregion

  }

  public sealed partial class UUID : pb::IMessage<UUID> {
    private static readonly pb::MessageParser<UUID> _parser = new pb::MessageParser<UUID>(() => new UUID());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UUID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID(UUID other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID Clone() {
      return new UUID(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UUID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UUID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UUID other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
