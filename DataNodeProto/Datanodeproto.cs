// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datanodeproto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataNodeProto {

  /// <summary>Holder for reflection information generated from datanodeproto.proto</summary>
  public static partial class DatanodeprotoReflection {

    #region Descriptor
    /// <summary>File descriptor for datanodeproto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DatanodeprotoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNkYXRhbm9kZXByb3RvLnByb3RvEg1EYXRhTm9kZVByb3RvIkEKEEhlYXJ0",
            "QmVhdFJlcXVlc3QSLQoIbm9kZUluZm8YASABKAsyGy5EYXRhTm9kZVByb3Rv",
            "LkRhdGFOb2RlSW5mbyJGChFIZWFydEJlYXRSZXNwb25zZRIxCghjb21tYW5k",
            "cxgBIAMoCzIfLkRhdGFOb2RlUHJvdG8uRGF0YU5vZGVDb21tYW5kcyJmChJC",
            "bG9ja1JlcG9ydFJlcXVlc3QSIwoGbm9kZUlkGAEgASgLMhMuRGF0YU5vZGVQ",
            "cm90by5VVUlEEisKCWJsb2NrTGlzdBgCIAEoCzIYLkRhdGFOb2RlUHJvdG8u",
            "QmxvY2tMaXN0ImsKCURhdGFCbG9jaxIkCgdibG9ja0lkGAEgASgLMhMuRGF0",
            "YU5vZGVQcm90by5VVUlEEgwKBGRhdGEYAiABKAwSKgoJZGF0YU5vZGVzGAMg",
            "AygLMhcuRGF0YU5vZGVQcm90by5EYXRhTm9kZSI+CghEYXRhTm9kZRIfCgJp",
            "ZBgBIAEoCzITLkRhdGFOb2RlUHJvdG8uVVVJRBIRCglpcEFkZHJlc3MYAiAB",
            "KAkiTAoMRGF0YU5vZGVJbmZvEikKCGRhdGFOb2RlGAEgASgLMhcuRGF0YU5v",
            "ZGVQcm90by5EYXRhTm9kZRIRCglkaXNrU3BhY2UYAiABKAMiQAoQRGF0YU5v",
            "ZGVDb21tYW5kcxIsCgdjb21tYW5kGAEgASgLMhsuRGF0YU5vZGVQcm90by5C",
            "bG9ja0NvbW1hbmQiwAEKDEJsb2NrQ29tbWFuZBIyCgZhY3Rpb24YASABKA4y",
            "Ii5EYXRhTm9kZVByb3RvLkJsb2NrQ29tbWFuZC5BY3Rpb24SKwoJYmxvY2tM",
            "aXN0GAIgASgLMhguRGF0YU5vZGVQcm90by5CbG9ja0xpc3QSKwoJZGF0YUJs",
            "b2NrGAMgAygLMhguRGF0YU5vZGVQcm90by5EYXRhQmxvY2siIgoGQWN0aW9u",
            "EgwKCFRSQU5TRkVSEAASCgoGREVMRVRFEAEiMQoJQmxvY2tMaXN0EiQKB2Js",
            "b2NrSWQYASADKAsyEy5EYXRhTm9kZVByb3RvLlVVSUQibQoOU3RhdHVzUmVz",
            "cG9uc2USNgoEdHlwZRgBIAEoDjIoLkRhdGFOb2RlUHJvdG8uU3RhdHVzUmVz",
            "cG9uc2UuU3RhdHVzVHlwZSIjCgpTdGF0dXNUeXBlEgsKB1N1Y2Nlc3MQABII",
            "CgRGYWlsEAEiFQoEVVVJRBINCgV2YWx1ZRgBIAEoCTKLAgoNRGF0YU5vZGVQ",
            "cm90bxJUCg1TZW5kSGVhcnRCZWF0Eh8uRGF0YU5vZGVQcm90by5IZWFydEJl",
            "YXRSZXF1ZXN0GiAuRGF0YU5vZGVQcm90by5IZWFydEJlYXRSZXNwb25zZSIA",
            "ElUKD1NlbmRCbG9ja1JlcG9ydBIhLkRhdGFOb2RlUHJvdG8uQmxvY2tSZXBv",
            "cnRSZXF1ZXN0Gh0uRGF0YU5vZGVQcm90by5TdGF0dXNSZXNwb25zZSIAEk0K",
            "EEZvcndhcmREYXRhQmxvY2sSGC5EYXRhTm9kZVByb3RvLkRhdGFCbG9jaxod",
            "LkRhdGFOb2RlUHJvdG8uU3RhdHVzUmVzcG9uc2UiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.HeartBeatRequest), global::DataNodeProto.HeartBeatRequest.Parser, new[]{ "NodeInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.HeartBeatResponse), global::DataNodeProto.HeartBeatResponse.Parser, new[]{ "Commands" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.BlockReportRequest), global::DataNodeProto.BlockReportRequest.Parser, new[]{ "NodeId", "BlockList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.DataBlock), global::DataNodeProto.DataBlock.Parser, new[]{ "BlockId", "Data", "DataNodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.DataNode), global::DataNodeProto.DataNode.Parser, new[]{ "Id", "IpAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.DataNodeInfo), global::DataNodeProto.DataNodeInfo.Parser, new[]{ "DataNode", "DiskSpace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.DataNodeCommands), global::DataNodeProto.DataNodeCommands.Parser, new[]{ "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.BlockCommand), global::DataNodeProto.BlockCommand.Parser, new[]{ "Action", "BlockList", "DataBlock" }, null, new[]{ typeof(global::DataNodeProto.BlockCommand.Types.Action) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.BlockList), global::DataNodeProto.BlockList.Parser, new[]{ "BlockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.StatusResponse), global::DataNodeProto.StatusResponse.Parser, new[]{ "Type" }, null, new[]{ typeof(global::DataNodeProto.StatusResponse.Types.StatusType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.UUID), global::DataNodeProto.UUID.Parser, new[]{ "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class HeartBeatRequest : pb::IMessage<HeartBeatRequest> {
    private static readonly pb::MessageParser<HeartBeatRequest> _parser = new pb::MessageParser<HeartBeatRequest>(() => new HeartBeatRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRequest(HeartBeatRequest other) : this() {
      NodeInfo = other.nodeInfo_ != null ? other.NodeInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRequest Clone() {
      return new HeartBeatRequest(this);
    }

    /// <summary>Field number for the "nodeInfo" field.</summary>
    public const int NodeInfoFieldNumber = 1;
    private global::DataNodeProto.DataNodeInfo nodeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.DataNodeInfo NodeInfo {
      get { return nodeInfo_; }
      set {
        nodeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NodeInfo, other.NodeInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nodeInfo_ != null) hash ^= NodeInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nodeInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NodeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nodeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatRequest other) {
      if (other == null) {
        return;
      }
      if (other.nodeInfo_ != null) {
        if (nodeInfo_ == null) {
          nodeInfo_ = new global::DataNodeProto.DataNodeInfo();
        }
        NodeInfo.MergeFrom(other.NodeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (nodeInfo_ == null) {
              nodeInfo_ = new global::DataNodeProto.DataNodeInfo();
            }
            input.ReadMessage(nodeInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeartBeatResponse : pb::IMessage<HeartBeatResponse> {
    private static readonly pb::MessageParser<HeartBeatResponse> _parser = new pb::MessageParser<HeartBeatResponse>(() => new HeartBeatResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatResponse(HeartBeatResponse other) : this() {
      commands_ = other.commands_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatResponse Clone() {
      return new HeartBeatResponse(this);
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataNodeProto.DataNodeCommands> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(10, global::DataNodeProto.DataNodeCommands.Parser);
    private readonly pbc::RepeatedField<global::DataNodeProto.DataNodeCommands> commands_ = new pbc::RepeatedField<global::DataNodeProto.DataNodeCommands>();
    /// <summary>
    /// Returned commands can be null
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataNodeProto.DataNodeCommands> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commands_.Equals(other.commands_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commands_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commands_.WriteTo(output, _repeated_commands_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commands_.CalculateSize(_repeated_commands_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatResponse other) {
      if (other == null) {
        return;
      }
      commands_.Add(other.commands_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockReportRequest : pb::IMessage<BlockReportRequest> {
    private static readonly pb::MessageParser<BlockReportRequest> _parser = new pb::MessageParser<BlockReportRequest>(() => new BlockReportRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockReportRequest(BlockReportRequest other) : this() {
      NodeId = other.nodeId_ != null ? other.NodeId.Clone() : null;
      BlockList = other.blockList_ != null ? other.BlockList.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockReportRequest Clone() {
      return new BlockReportRequest(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private global::DataNodeProto.UUID nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.UUID NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "blockList" field.</summary>
    public const int BlockListFieldNumber = 2;
    private global::DataNodeProto.BlockList blockList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.BlockList BlockList {
      get { return blockList_; }
      set {
        blockList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NodeId, other.NodeId)) return false;
      if (!object.Equals(BlockList, other.BlockList)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nodeId_ != null) hash ^= NodeId.GetHashCode();
      if (blockList_ != null) hash ^= BlockList.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nodeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NodeId);
      }
      if (blockList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlockList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nodeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
      }
      if (blockList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.nodeId_ != null) {
        if (nodeId_ == null) {
          nodeId_ = new global::DataNodeProto.UUID();
        }
        NodeId.MergeFrom(other.NodeId);
      }
      if (other.blockList_ != null) {
        if (blockList_ == null) {
          blockList_ = new global::DataNodeProto.BlockList();
        }
        BlockList.MergeFrom(other.BlockList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (nodeId_ == null) {
              nodeId_ = new global::DataNodeProto.UUID();
            }
            input.ReadMessage(nodeId_);
            break;
          }
          case 18: {
            if (blockList_ == null) {
              blockList_ = new global::DataNodeProto.BlockList();
            }
            input.ReadMessage(blockList_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataBlock : pb::IMessage<DataBlock> {
    private static readonly pb::MessageParser<DataBlock> _parser = new pb::MessageParser<DataBlock>(() => new DataBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlock(DataBlock other) : this() {
      BlockId = other.blockId_ != null ? other.BlockId.Clone() : null;
      data_ = other.data_;
      dataNodes_ = other.dataNodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlock Clone() {
      return new DataBlock(this);
    }

    /// <summary>Field number for the "blockId" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private global::DataNodeProto.UUID blockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.UUID BlockId {
      get { return blockId_; }
      set {
        blockId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataNodes" field.</summary>
    public const int DataNodesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DataNodeProto.DataNode> _repeated_dataNodes_codec
        = pb::FieldCodec.ForMessage(26, global::DataNodeProto.DataNode.Parser);
    private readonly pbc::RepeatedField<global::DataNodeProto.DataNode> dataNodes_ = new pbc::RepeatedField<global::DataNodeProto.DataNode>();
    /// <summary>
    /// Remaining nodes to forward data to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataNodeProto.DataNode> DataNodes {
      get { return dataNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BlockId, other.BlockId)) return false;
      if (Data != other.Data) return false;
      if(!dataNodes_.Equals(other.dataNodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (blockId_ != null) hash ^= BlockId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      hash ^= dataNodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (blockId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BlockId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      dataNodes_.WriteTo(output, _repeated_dataNodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (blockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      size += dataNodes_.CalculateSize(_repeated_dataNodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataBlock other) {
      if (other == null) {
        return;
      }
      if (other.blockId_ != null) {
        if (blockId_ == null) {
          blockId_ = new global::DataNodeProto.UUID();
        }
        BlockId.MergeFrom(other.BlockId);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      dataNodes_.Add(other.dataNodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (blockId_ == null) {
              blockId_ = new global::DataNodeProto.UUID();
            }
            input.ReadMessage(blockId_);
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            dataNodes_.AddEntriesFrom(input, _repeated_dataNodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataNode : pb::IMessage<DataNode> {
    private static readonly pb::MessageParser<DataNode> _parser = new pb::MessageParser<DataNode>(() => new DataNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNode(DataNode other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      ipAddress_ = other.ipAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNode Clone() {
      return new DataNode(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::DataNodeProto.UUID id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.UUID Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ipAddress" field.</summary>
    public const int IpAddressFieldNumber = 2;
    private string ipAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (IpAddress != other.IpAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IpAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataNode other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::DataNodeProto.UUID();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::DataNodeProto.UUID();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            IpAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataNodeInfo : pb::IMessage<DataNodeInfo> {
    private static readonly pb::MessageParser<DataNodeInfo> _parser = new pb::MessageParser<DataNodeInfo>(() => new DataNodeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataNodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNodeInfo(DataNodeInfo other) : this() {
      DataNode = other.dataNode_ != null ? other.DataNode.Clone() : null;
      diskSpace_ = other.diskSpace_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNodeInfo Clone() {
      return new DataNodeInfo(this);
    }

    /// <summary>Field number for the "dataNode" field.</summary>
    public const int DataNodeFieldNumber = 1;
    private global::DataNodeProto.DataNode dataNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.DataNode DataNode {
      get { return dataNode_; }
      set {
        dataNode_ = value;
      }
    }

    /// <summary>Field number for the "diskSpace" field.</summary>
    public const int DiskSpaceFieldNumber = 2;
    private long diskSpace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DiskSpace {
      get { return diskSpace_; }
      set {
        diskSpace_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataNodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataNodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DataNode, other.DataNode)) return false;
      if (DiskSpace != other.DiskSpace) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataNode_ != null) hash ^= DataNode.GetHashCode();
      if (DiskSpace != 0L) hash ^= DiskSpace.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataNode_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DataNode);
      }
      if (DiskSpace != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DiskSpace);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataNode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataNode);
      }
      if (DiskSpace != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiskSpace);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataNodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.dataNode_ != null) {
        if (dataNode_ == null) {
          dataNode_ = new global::DataNodeProto.DataNode();
        }
        DataNode.MergeFrom(other.DataNode);
      }
      if (other.DiskSpace != 0L) {
        DiskSpace = other.DiskSpace;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dataNode_ == null) {
              dataNode_ = new global::DataNodeProto.DataNode();
            }
            input.ReadMessage(dataNode_);
            break;
          }
          case 16: {
            DiskSpace = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Commands sent back from namenode is response to heartbeat
  /// </summary>
  public sealed partial class DataNodeCommands : pb::IMessage<DataNodeCommands> {
    private static readonly pb::MessageParser<DataNodeCommands> _parser = new pb::MessageParser<DataNodeCommands>(() => new DataNodeCommands());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataNodeCommands> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNodeCommands() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNodeCommands(DataNodeCommands other) : this() {
      Command = other.command_ != null ? other.Command.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNodeCommands Clone() {
      return new DataNodeCommands(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private global::DataNodeProto.BlockCommand command_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.BlockCommand Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataNodeCommands);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataNodeCommands other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Command, other.Command)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (command_ != null) hash ^= Command.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (command_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Command);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (command_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Command);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataNodeCommands other) {
      if (other == null) {
        return;
      }
      if (other.command_ != null) {
        if (command_ == null) {
          command_ = new global::DataNodeProto.BlockCommand();
        }
        Command.MergeFrom(other.Command);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (command_ == null) {
              command_ = new global::DataNodeProto.BlockCommand();
            }
            input.ReadMessage(command_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockCommand : pb::IMessage<BlockCommand> {
    private static readonly pb::MessageParser<BlockCommand> _parser = new pb::MessageParser<BlockCommand>(() => new BlockCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockCommand(BlockCommand other) : this() {
      action_ = other.action_;
      BlockList = other.blockList_ != null ? other.BlockList.Clone() : null;
      dataBlock_ = other.dataBlock_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockCommand Clone() {
      return new BlockCommand(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::DataNodeProto.BlockCommand.Types.Action action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.BlockCommand.Types.Action Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "blockList" field.</summary>
    public const int BlockListFieldNumber = 2;
    private global::DataNodeProto.BlockList blockList_;
    /// <summary>
    /// For Delete
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.BlockList BlockList {
      get { return blockList_; }
      set {
        blockList_ = value;
      }
    }

    /// <summary>Field number for the "dataBlock" field.</summary>
    public const int DataBlockFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DataNodeProto.DataBlock> _repeated_dataBlock_codec
        = pb::FieldCodec.ForMessage(26, global::DataNodeProto.DataBlock.Parser);
    private readonly pbc::RepeatedField<global::DataNodeProto.DataBlock> dataBlock_ = new pbc::RepeatedField<global::DataNodeProto.DataBlock>();
    /// <summary>
    /// For Transfer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataNodeProto.DataBlock> DataBlock {
      get { return dataBlock_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (!object.Equals(BlockList, other.BlockList)) return false;
      if(!dataBlock_.Equals(other.dataBlock_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (blockList_ != null) hash ^= BlockList.GetHashCode();
      hash ^= dataBlock_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      if (blockList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlockList);
      }
      dataBlock_.WriteTo(output, _repeated_dataBlock_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (blockList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockList);
      }
      size += dataBlock_.CalculateSize(_repeated_dataBlock_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockCommand other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.blockList_ != null) {
        if (blockList_ == null) {
          blockList_ = new global::DataNodeProto.BlockList();
        }
        BlockList.MergeFrom(other.BlockList);
      }
      dataBlock_.Add(other.dataBlock_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            action_ = (global::DataNodeProto.BlockCommand.Types.Action) input.ReadEnum();
            break;
          }
          case 18: {
            if (blockList_ == null) {
              blockList_ = new global::DataNodeProto.BlockList();
            }
            input.ReadMessage(blockList_);
            break;
          }
          case 26: {
            dataBlock_.AddEntriesFrom(input, _repeated_dataBlock_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlockCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Action {
        /// <summary>
        /// Transfer blocks to another datanode
        /// </summary>
        [pbr::OriginalName("TRANSFER")] Transfer = 0,
        /// <summary>
        /// DELETE blocks
        /// </summary>
        [pbr::OriginalName("DELETE")] Delete = 1,
      }

    }
    #endregion

  }

  public sealed partial class BlockList : pb::IMessage<BlockList> {
    private static readonly pb::MessageParser<BlockList> _parser = new pb::MessageParser<BlockList>(() => new BlockList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList(BlockList other) : this() {
      blockId_ = other.blockId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList Clone() {
      return new BlockList(this);
    }

    /// <summary>Field number for the "blockId" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataNodeProto.UUID> _repeated_blockId_codec
        = pb::FieldCodec.ForMessage(10, global::DataNodeProto.UUID.Parser);
    private readonly pbc::RepeatedField<global::DataNodeProto.UUID> blockId_ = new pbc::RepeatedField<global::DataNodeProto.UUID>();
    /// <summary>
    /// Blocks stored on datanode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataNodeProto.UUID> BlockId {
      get { return blockId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blockId_.Equals(other.blockId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blockId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blockId_.WriteTo(output, _repeated_blockId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blockId_.CalculateSize(_repeated_blockId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockList other) {
      if (other == null) {
        return;
      }
      blockId_.Add(other.blockId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            blockId_.AddEntriesFrom(input, _repeated_blockId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusResponse : pb::IMessage<StatusResponse> {
    private static readonly pb::MessageParser<StatusResponse> _parser = new pb::MessageParser<StatusResponse>(() => new StatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse(StatusResponse other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse Clone() {
      return new StatusResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DataNodeProto.StatusResponse.Types.StatusType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.StatusResponse.Types.StatusType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::DataNodeProto.StatusResponse.Types.StatusType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StatusResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StatusType {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("Fail")] Fail = 1,
      }

    }
    #endregion

  }

  public sealed partial class UUID : pb::IMessage<UUID> {
    private static readonly pb::MessageParser<UUID> _parser = new pb::MessageParser<UUID>(() => new UUID());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UUID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID(UUID other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID Clone() {
      return new UUID(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UUID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UUID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UUID other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
