// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datanodeproto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataNodeProto {

  /// <summary>Holder for reflection information generated from datanodeproto.proto</summary>
  public static partial class DatanodeprotoReflection {

    #region Descriptor
    /// <summary>File descriptor for datanodeproto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DatanodeprotoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNkYXRhbm9kZXByb3RvLnByb3RvEg1EYXRhTm9kZVByb3RvIisKEEhlYXJ0",
            "QmVhdFJlcXVlc3QSFwoPaGVhcnRCZWF0U3RyaW5nGAEgASgJIkIKEUhlYXJ0",
            "QmVhdFJlc3BvbnNlEi0KBGNtZHMYASADKAsyHy5EYXRhTm9kZVByb3RvLkRh",
            "dGFOb2RlQ29tbWFuZHMiZgoSQmxvY2tSZXBvcnRSZXF1ZXN0EiMKBm5vZGVJ",
            "ZBgBIAEoCzITLkRhdGFOb2RlUHJvdG8uVVVJRBIrCglibG9ja0xpc3QYAiAB",
            "KAsyGC5EYXRhTm9kZVByb3RvLkJsb2NrTGlzdCJrCglEYXRhQmxvY2sSJAoH",
            "YmxvY2tJZBgBIAEoCzITLkRhdGFOb2RlUHJvdG8uVVVJRBIMCgRkYXRhGAIg",
            "ASgMEioKCWRhdGFOb2RlcxgDIAMoCzIXLkRhdGFOb2RlUHJvdG8uRGF0YU5v",
            "ZGUiPgoIRGF0YU5vZGUSHwoCaWQYASABKAsyEy5EYXRhTm9kZVByb3RvLlVV",
            "SUQSEQoJaXBBZGRyZXNzGAIgASgJIq8BChBEYXRhTm9kZUNvbW1hbmRzEjUK",
            "B2NtZFR5cGUYASABKA4yJC5EYXRhTm9kZVByb3RvLkRhdGFOb2RlQ29tbWFu",
            "ZHMuVHlwZRIwCgZibGtDbWQYAiABKAsyIC5EYXRhTm9kZVByb3RvLkJsb2Nr",
            "Q29tbWFuZFByb3RvIjIKBFR5cGUSEAoMQmxvY2tDb21tYW5kEAASGAoUQmxv",
            "Y2tSZWNvdmVyeUNvbW1hbmQQASLOAQoRQmxvY2tDb21tYW5kUHJvdG8SNwoG",
            "YWN0aW9uGAEgASgOMicuRGF0YU5vZGVQcm90by5CbG9ja0NvbW1hbmRQcm90",
            "by5BY3Rpb24SKwoJYmxvY2tMaXN0GAIgASgLMhguRGF0YU5vZGVQcm90by5C",
            "bG9ja0xpc3QSKwoJZGF0YUJsb2NrGAMgASgLMhguRGF0YU5vZGVQcm90by5E",
            "YXRhQmxvY2siJgoGQWN0aW9uEgwKCFRSQU5TRkVSEAASDgoKSU5WQUxJREFU",
            "RRABIjEKCUJsb2NrTGlzdBIkCgdibG9ja0lkGAEgAygLMhMuRGF0YU5vZGVQ",
            "cm90by5VVUlEIm0KDlN0YXR1c1Jlc3BvbnNlEjYKBHR5cGUYASABKA4yKC5E",
            "YXRhTm9kZVByb3RvLlN0YXR1c1Jlc3BvbnNlLlN0YXR1c1R5cGUiIwoKU3Rh",
            "dHVzVHlwZRILCgdTdWNjZXNzEAASCAoERmFpbBABIhUKBFVVSUQSDQoFdmFs",
            "dWUYASABKAkyiQIKDURhdGFOb2RlUHJvdG8SVAoNU2VuZEhlYXJ0QmVhdBIf",
            "LkRhdGFOb2RlUHJvdG8uSGVhcnRCZWF0UmVxdWVzdBogLkRhdGFOb2RlUHJv",
            "dG8uSGVhcnRCZWF0UmVzcG9uc2UiABJVCg9TZW5kQmxvY2tSZXBvcnQSIS5E",
            "YXRhTm9kZVByb3RvLkJsb2NrUmVwb3J0UmVxdWVzdBodLkRhdGFOb2RlUHJv",
            "dG8uU3RhdHVzUmVzcG9uc2UiABJLCg5Xcml0ZURhdGFCbG9jaxIYLkRhdGFO",
            "b2RlUHJvdG8uRGF0YUJsb2NrGh0uRGF0YU5vZGVQcm90by5TdGF0dXNSZXNw",
            "b25zZSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.HeartBeatRequest), global::DataNodeProto.HeartBeatRequest.Parser, new[]{ "HeartBeatString" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.HeartBeatResponse), global::DataNodeProto.HeartBeatResponse.Parser, new[]{ "Cmds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.BlockReportRequest), global::DataNodeProto.BlockReportRequest.Parser, new[]{ "NodeId", "BlockList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.DataBlock), global::DataNodeProto.DataBlock.Parser, new[]{ "BlockId", "Data", "DataNodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.DataNode), global::DataNodeProto.DataNode.Parser, new[]{ "Id", "IpAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.DataNodeCommands), global::DataNodeProto.DataNodeCommands.Parser, new[]{ "CmdType", "BlkCmd" }, null, new[]{ typeof(global::DataNodeProto.DataNodeCommands.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.BlockCommandProto), global::DataNodeProto.BlockCommandProto.Parser, new[]{ "Action", "BlockList", "DataBlock" }, null, new[]{ typeof(global::DataNodeProto.BlockCommandProto.Types.Action) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.BlockList), global::DataNodeProto.BlockList.Parser, new[]{ "BlockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.StatusResponse), global::DataNodeProto.StatusResponse.Parser, new[]{ "Type" }, null, new[]{ typeof(global::DataNodeProto.StatusResponse.Types.StatusType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataNodeProto.UUID), global::DataNodeProto.UUID.Parser, new[]{ "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class HeartBeatRequest : pb::IMessage<HeartBeatRequest> {
    private static readonly pb::MessageParser<HeartBeatRequest> _parser = new pb::MessageParser<HeartBeatRequest>(() => new HeartBeatRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRequest(HeartBeatRequest other) : this() {
      heartBeatString_ = other.heartBeatString_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRequest Clone() {
      return new HeartBeatRequest(this);
    }

    /// <summary>Field number for the "heartBeatString" field.</summary>
    public const int HeartBeatStringFieldNumber = 1;
    private string heartBeatString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeartBeatString {
      get { return heartBeatString_; }
      set {
        heartBeatString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeartBeatString != other.HeartBeatString) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeartBeatString.Length != 0) hash ^= HeartBeatString.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeartBeatString.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HeartBeatString);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeartBeatString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeartBeatString);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatRequest other) {
      if (other == null) {
        return;
      }
      if (other.HeartBeatString.Length != 0) {
        HeartBeatString = other.HeartBeatString;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            HeartBeatString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeartBeatResponse : pb::IMessage<HeartBeatResponse> {
    private static readonly pb::MessageParser<HeartBeatResponse> _parser = new pb::MessageParser<HeartBeatResponse>(() => new HeartBeatResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatResponse(HeartBeatResponse other) : this() {
      cmds_ = other.cmds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatResponse Clone() {
      return new HeartBeatResponse(this);
    }

    /// <summary>Field number for the "cmds" field.</summary>
    public const int CmdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataNodeProto.DataNodeCommands> _repeated_cmds_codec
        = pb::FieldCodec.ForMessage(10, global::DataNodeProto.DataNodeCommands.Parser);
    private readonly pbc::RepeatedField<global::DataNodeProto.DataNodeCommands> cmds_ = new pbc::RepeatedField<global::DataNodeProto.DataNodeCommands>();
    /// <summary>
    /// Returned commands can be null
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataNodeProto.DataNodeCommands> Cmds {
      get { return cmds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cmds_.Equals(other.cmds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cmds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cmds_.WriteTo(output, _repeated_cmds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cmds_.CalculateSize(_repeated_cmds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatResponse other) {
      if (other == null) {
        return;
      }
      cmds_.Add(other.cmds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cmds_.AddEntriesFrom(input, _repeated_cmds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockReportRequest : pb::IMessage<BlockReportRequest> {
    private static readonly pb::MessageParser<BlockReportRequest> _parser = new pb::MessageParser<BlockReportRequest>(() => new BlockReportRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockReportRequest(BlockReportRequest other) : this() {
      NodeId = other.nodeId_ != null ? other.NodeId.Clone() : null;
      BlockList = other.blockList_ != null ? other.BlockList.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockReportRequest Clone() {
      return new BlockReportRequest(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private global::DataNodeProto.UUID nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.UUID NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "blockList" field.</summary>
    public const int BlockListFieldNumber = 2;
    private global::DataNodeProto.BlockList blockList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.BlockList BlockList {
      get { return blockList_; }
      set {
        blockList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NodeId, other.NodeId)) return false;
      if (!object.Equals(BlockList, other.BlockList)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nodeId_ != null) hash ^= NodeId.GetHashCode();
      if (blockList_ != null) hash ^= BlockList.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nodeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NodeId);
      }
      if (blockList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlockList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nodeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
      }
      if (blockList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.nodeId_ != null) {
        if (nodeId_ == null) {
          nodeId_ = new global::DataNodeProto.UUID();
        }
        NodeId.MergeFrom(other.NodeId);
      }
      if (other.blockList_ != null) {
        if (blockList_ == null) {
          blockList_ = new global::DataNodeProto.BlockList();
        }
        BlockList.MergeFrom(other.BlockList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (nodeId_ == null) {
              nodeId_ = new global::DataNodeProto.UUID();
            }
            input.ReadMessage(nodeId_);
            break;
          }
          case 18: {
            if (blockList_ == null) {
              blockList_ = new global::DataNodeProto.BlockList();
            }
            input.ReadMessage(blockList_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataBlock : pb::IMessage<DataBlock> {
    private static readonly pb::MessageParser<DataBlock> _parser = new pb::MessageParser<DataBlock>(() => new DataBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlock(DataBlock other) : this() {
      BlockId = other.blockId_ != null ? other.BlockId.Clone() : null;
      data_ = other.data_;
      dataNodes_ = other.dataNodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlock Clone() {
      return new DataBlock(this);
    }

    /// <summary>Field number for the "blockId" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private global::DataNodeProto.UUID blockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.UUID BlockId {
      get { return blockId_; }
      set {
        blockId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataNodes" field.</summary>
    public const int DataNodesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DataNodeProto.DataNode> _repeated_dataNodes_codec
        = pb::FieldCodec.ForMessage(26, global::DataNodeProto.DataNode.Parser);
    private readonly pbc::RepeatedField<global::DataNodeProto.DataNode> dataNodes_ = new pbc::RepeatedField<global::DataNodeProto.DataNode>();
    /// <summary>
    /// Remaining nodes to forward data to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataNodeProto.DataNode> DataNodes {
      get { return dataNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BlockId, other.BlockId)) return false;
      if (Data != other.Data) return false;
      if(!dataNodes_.Equals(other.dataNodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (blockId_ != null) hash ^= BlockId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      hash ^= dataNodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (blockId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BlockId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      dataNodes_.WriteTo(output, _repeated_dataNodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (blockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      size += dataNodes_.CalculateSize(_repeated_dataNodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataBlock other) {
      if (other == null) {
        return;
      }
      if (other.blockId_ != null) {
        if (blockId_ == null) {
          blockId_ = new global::DataNodeProto.UUID();
        }
        BlockId.MergeFrom(other.BlockId);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      dataNodes_.Add(other.dataNodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (blockId_ == null) {
              blockId_ = new global::DataNodeProto.UUID();
            }
            input.ReadMessage(blockId_);
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            dataNodes_.AddEntriesFrom(input, _repeated_dataNodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataNode : pb::IMessage<DataNode> {
    private static readonly pb::MessageParser<DataNode> _parser = new pb::MessageParser<DataNode>(() => new DataNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNode(DataNode other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      ipAddress_ = other.ipAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNode Clone() {
      return new DataNode(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::DataNodeProto.UUID id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.UUID Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ipAddress" field.</summary>
    public const int IpAddressFieldNumber = 2;
    private string ipAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (IpAddress != other.IpAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IpAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataNode other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::DataNodeProto.UUID();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::DataNodeProto.UUID();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            IpAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Comands sent back from namenode is response to heartbeat
  /// </summary>
  public sealed partial class DataNodeCommands : pb::IMessage<DataNodeCommands> {
    private static readonly pb::MessageParser<DataNodeCommands> _parser = new pb::MessageParser<DataNodeCommands>(() => new DataNodeCommands());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataNodeCommands> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNodeCommands() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNodeCommands(DataNodeCommands other) : this() {
      cmdType_ = other.cmdType_;
      BlkCmd = other.blkCmd_ != null ? other.BlkCmd.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNodeCommands Clone() {
      return new DataNodeCommands(this);
    }

    /// <summary>Field number for the "cmdType" field.</summary>
    public const int CmdTypeFieldNumber = 1;
    private global::DataNodeProto.DataNodeCommands.Types.Type cmdType_ = 0;
    /// <summary>
    /// Type of the command
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.DataNodeCommands.Types.Type CmdType {
      get { return cmdType_; }
      set {
        cmdType_ = value;
      }
    }

    /// <summary>Field number for the "blkCmd" field.</summary>
    public const int BlkCmdFieldNumber = 2;
    private global::DataNodeProto.BlockCommandProto blkCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.BlockCommandProto BlkCmd {
      get { return blkCmd_; }
      set {
        blkCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataNodeCommands);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataNodeCommands other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdType != other.CmdType) return false;
      if (!object.Equals(BlkCmd, other.BlkCmd)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdType != 0) hash ^= CmdType.GetHashCode();
      if (blkCmd_ != null) hash ^= BlkCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CmdType);
      }
      if (blkCmd_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlkCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CmdType);
      }
      if (blkCmd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlkCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataNodeCommands other) {
      if (other == null) {
        return;
      }
      if (other.CmdType != 0) {
        CmdType = other.CmdType;
      }
      if (other.blkCmd_ != null) {
        if (blkCmd_ == null) {
          blkCmd_ = new global::DataNodeProto.BlockCommandProto();
        }
        BlkCmd.MergeFrom(other.BlkCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            cmdType_ = (global::DataNodeProto.DataNodeCommands.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (blkCmd_ == null) {
              blkCmd_ = new global::DataNodeProto.BlockCommandProto();
            }
            input.ReadMessage(blkCmd_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DataNodeCommands message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("BlockCommand")] BlockCommand = 0,
        [pbr::OriginalName("BlockRecoveryCommand")] BlockRecoveryCommand = 1,
      }

    }
    #endregion

  }

  public sealed partial class BlockCommandProto : pb::IMessage<BlockCommandProto> {
    private static readonly pb::MessageParser<BlockCommandProto> _parser = new pb::MessageParser<BlockCommandProto>(() => new BlockCommandProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockCommandProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockCommandProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockCommandProto(BlockCommandProto other) : this() {
      action_ = other.action_;
      BlockList = other.blockList_ != null ? other.BlockList.Clone() : null;
      DataBlock = other.dataBlock_ != null ? other.DataBlock.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockCommandProto Clone() {
      return new BlockCommandProto(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::DataNodeProto.BlockCommandProto.Types.Action action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.BlockCommandProto.Types.Action Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "blockList" field.</summary>
    public const int BlockListFieldNumber = 2;
    private global::DataNodeProto.BlockList blockList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.BlockList BlockList {
      get { return blockList_; }
      set {
        blockList_ = value;
      }
    }

    /// <summary>Field number for the "dataBlock" field.</summary>
    public const int DataBlockFieldNumber = 3;
    private global::DataNodeProto.DataBlock dataBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.DataBlock DataBlock {
      get { return dataBlock_; }
      set {
        dataBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockCommandProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockCommandProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (!object.Equals(BlockList, other.BlockList)) return false;
      if (!object.Equals(DataBlock, other.DataBlock)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (blockList_ != null) hash ^= BlockList.GetHashCode();
      if (dataBlock_ != null) hash ^= DataBlock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      if (blockList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlockList);
      }
      if (dataBlock_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DataBlock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (blockList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockList);
      }
      if (dataBlock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataBlock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockCommandProto other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.blockList_ != null) {
        if (blockList_ == null) {
          blockList_ = new global::DataNodeProto.BlockList();
        }
        BlockList.MergeFrom(other.BlockList);
      }
      if (other.dataBlock_ != null) {
        if (dataBlock_ == null) {
          dataBlock_ = new global::DataNodeProto.DataBlock();
        }
        DataBlock.MergeFrom(other.DataBlock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            action_ = (global::DataNodeProto.BlockCommandProto.Types.Action) input.ReadEnum();
            break;
          }
          case 18: {
            if (blockList_ == null) {
              blockList_ = new global::DataNodeProto.BlockList();
            }
            input.ReadMessage(blockList_);
            break;
          }
          case 26: {
            if (dataBlock_ == null) {
              dataBlock_ = new global::DataNodeProto.DataBlock();
            }
            input.ReadMessage(dataBlock_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlockCommandProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Action {
        /// <summary>
        /// Transfer blocks to another datanode
        /// </summary>
        [pbr::OriginalName("TRANSFER")] Transfer = 0,
        /// <summary>
        /// Invalidate blocks
        /// </summary>
        [pbr::OriginalName("INVALIDATE")] Invalidate = 1,
      }

    }
    #endregion

  }

  public sealed partial class BlockList : pb::IMessage<BlockList> {
    private static readonly pb::MessageParser<BlockList> _parser = new pb::MessageParser<BlockList>(() => new BlockList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList(BlockList other) : this() {
      blockId_ = other.blockId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList Clone() {
      return new BlockList(this);
    }

    /// <summary>Field number for the "blockId" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataNodeProto.UUID> _repeated_blockId_codec
        = pb::FieldCodec.ForMessage(10, global::DataNodeProto.UUID.Parser);
    private readonly pbc::RepeatedField<global::DataNodeProto.UUID> blockId_ = new pbc::RepeatedField<global::DataNodeProto.UUID>();
    /// <summary>
    /// Blocks stored on datanode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataNodeProto.UUID> BlockId {
      get { return blockId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blockId_.Equals(other.blockId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blockId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blockId_.WriteTo(output, _repeated_blockId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blockId_.CalculateSize(_repeated_blockId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockList other) {
      if (other == null) {
        return;
      }
      blockId_.Add(other.blockId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            blockId_.AddEntriesFrom(input, _repeated_blockId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusResponse : pb::IMessage<StatusResponse> {
    private static readonly pb::MessageParser<StatusResponse> _parser = new pb::MessageParser<StatusResponse>(() => new StatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse(StatusResponse other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse Clone() {
      return new StatusResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DataNodeProto.StatusResponse.Types.StatusType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataNodeProto.StatusResponse.Types.StatusType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::DataNodeProto.StatusResponse.Types.StatusType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StatusResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StatusType {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("Fail")] Fail = 1,
      }

    }
    #endregion

  }

  public sealed partial class UUID : pb::IMessage<UUID> {
    private static readonly pb::MessageParser<UUID> _parser = new pb::MessageParser<UUID>(() => new UUID());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UUID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataNodeProto.DatanodeprotoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID(UUID other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID Clone() {
      return new UUID(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UUID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UUID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UUID other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
