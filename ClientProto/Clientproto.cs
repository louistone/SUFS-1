// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientproto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ClientProto {

  /// <summary>Holder for reflection information generated from clientproto.proto</summary>
  public static partial class ClientprotoReflection {

    #region Descriptor
    /// <summary>File descriptor for clientproto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientprotoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFjbGllbnRwcm90by5wcm90bxILQ2xpZW50UHJvdG8iZwoJRGF0YUJsb2Nr",
            "EiIKB2Jsb2NrSWQYASABKAsyES5DbGllbnRQcm90by5VVUlEEgwKBGRhdGEY",
            "AiABKAwSKAoJZGF0YU5vZGVzGAMgAygLMhUuQ2xpZW50UHJvdG8uRGF0YU5v",
            "ZGUiPAoIRGF0YU5vZGUSHQoCaWQYASABKAsyES5DbGllbnRQcm90by5VVUlE",
            "EhEKCWlwQWRkcmVzcxgCIAEoCSI5CgxCbG9ja01lc3NhZ2USKQoJYmxvY2tJ",
            "bmZvGAEgAygLMhYuQ2xpZW50UHJvdG8uQmxvY2tJbmZvIkIKCUJsb2NrSW5m",
            "bxIiCgdibG9ja0lkGAEgASgLMhEuQ2xpZW50UHJvdG8uVVVJRBIRCglpcEFk",
            "ZHJlc3MYAiADKAkiGQoJQmxvY2tEYXRhEgwKBGRhdGEYASABKAwiJgoRRGF0",
            "YU5vZGVBZGRyZXNzZXMSEQoJaXBBZGRyZXNzGAEgAygJIhUKBFVVSUQSDQoF",
            "dmFsdWUYASABKAkiGAoEUGF0aBIQCghmdWxscGF0aBgBIAEoCSJ2Cg5TdGF0",
            "dXNSZXNwb25zZRI0CgR0eXBlGAEgASgOMiYuQ2xpZW50UHJvdG8uU3RhdHVz",
            "UmVzcG9uc2UuU3RhdHVzVHlwZSIuCgpTdGF0dXNUeXBlEgsKB1N1Y2Nlc3MQ",
            "ABIICgRGYWlsEAESCQoFUmVhZHkQAiIuCgtMaXN0T2ZOb2RlcxIPCgdibG9j",
            "a0lkGAEgASgJEg4KBm5vZGVJZBgCIAMoCSIiCg5MaXN0T2ZDb250ZW50cxIQ",
            "CghmaWxlTmFtZRgBIAMoCSIsCgdOZXdGaWxlEhAKCGZ1bGxwYXRoGAEgASgJ",
            "Eg8KB2FkZHJlc3MYAiABKAky4QQKC0NsaWVudFByb3RvEkMKD0RlbGV0ZURp",
            "cmVjdG9yeRIRLkNsaWVudFByb3RvLlBhdGgaGy5DbGllbnRQcm90by5TdGF0",
            "dXNSZXNwb25zZSIAEkAKDEFkZERpcmVjdG9yeRIRLkNsaWVudFByb3RvLlBh",
            "dGgaGy5DbGllbnRQcm90by5TdGF0dXNSZXNwb25zZSIAEjoKCUxpc3ROb2Rl",
            "cxIRLkNsaWVudFByb3RvLlBhdGgaGC5DbGllbnRQcm90by5MaXN0T2ZOb2Rl",
            "cyIAEj8KCkNyZWF0ZUZpbGUSFC5DbGllbnRQcm90by5OZXdGaWxlGhkuQ2xp",
            "ZW50UHJvdG8uQmxvY2tNZXNzYWdlIgASPgoKRGVsZXRlRmlsZRIRLkNsaWVu",
            "dFByb3RvLlBhdGgaGy5DbGllbnRQcm90by5TdGF0dXNSZXNwb25zZSIAEkAK",
            "DExpc3RDb250ZW50cxIRLkNsaWVudFByb3RvLlBhdGgaGy5DbGllbnRQcm90",
            "by5MaXN0T2ZDb250ZW50cyIAEjoKCVJlYWRCbG9jaxIRLkNsaWVudFByb3Rv",
            "LlVVSUQaFi5DbGllbnRQcm90by5CbG9ja0RhdGEiADABEkUKCldyaXRlQmxv",
            "Y2sSFi5DbGllbnRQcm90by5CbG9ja0RhdGEaGy5DbGllbnRQcm90by5TdGF0",
            "dXNSZXNwb25zZSIAKAESSQoIR2V0UmVhZHkSHi5DbGllbnRQcm90by5EYXRh",
            "Tm9kZUFkZHJlc3NlcxobLkNsaWVudFByb3RvLlN0YXR1c1Jlc3BvbnNlIgBi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientProto.DataBlock), global::ClientProto.DataBlock.Parser, new[]{ "BlockId", "Data", "DataNodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientProto.DataNode), global::ClientProto.DataNode.Parser, new[]{ "Id", "IpAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientProto.BlockMessage), global::ClientProto.BlockMessage.Parser, new[]{ "BlockInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientProto.BlockInfo), global::ClientProto.BlockInfo.Parser, new[]{ "BlockId", "IpAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientProto.BlockData), global::ClientProto.BlockData.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientProto.DataNodeAddresses), global::ClientProto.DataNodeAddresses.Parser, new[]{ "IpAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientProto.UUID), global::ClientProto.UUID.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientProto.Path), global::ClientProto.Path.Parser, new[]{ "Fullpath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientProto.StatusResponse), global::ClientProto.StatusResponse.Parser, new[]{ "Type" }, null, new[]{ typeof(global::ClientProto.StatusResponse.Types.StatusType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientProto.ListOfNodes), global::ClientProto.ListOfNodes.Parser, new[]{ "BlockId", "NodeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientProto.ListOfContents), global::ClientProto.ListOfContents.Parser, new[]{ "FileName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientProto.NewFile), global::ClientProto.NewFile.Parser, new[]{ "Fullpath", "Address" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DataBlock : pb::IMessage<DataBlock> {
    private static readonly pb::MessageParser<DataBlock> _parser = new pb::MessageParser<DataBlock>(() => new DataBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientProto.ClientprotoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlock(DataBlock other) : this() {
      BlockId = other.blockId_ != null ? other.BlockId.Clone() : null;
      data_ = other.data_;
      dataNodes_ = other.dataNodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlock Clone() {
      return new DataBlock(this);
    }

    /// <summary>Field number for the "blockId" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private global::ClientProto.UUID blockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ClientProto.UUID BlockId {
      get { return blockId_; }
      set {
        blockId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataNodes" field.</summary>
    public const int DataNodesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ClientProto.DataNode> _repeated_dataNodes_codec
        = pb::FieldCodec.ForMessage(26, global::ClientProto.DataNode.Parser);
    private readonly pbc::RepeatedField<global::ClientProto.DataNode> dataNodes_ = new pbc::RepeatedField<global::ClientProto.DataNode>();
    /// <summary>
    /// Remaining nodes to forward data to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ClientProto.DataNode> DataNodes {
      get { return dataNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BlockId, other.BlockId)) return false;
      if (Data != other.Data) return false;
      if(!dataNodes_.Equals(other.dataNodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (blockId_ != null) hash ^= BlockId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      hash ^= dataNodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (blockId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BlockId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      dataNodes_.WriteTo(output, _repeated_dataNodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (blockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      size += dataNodes_.CalculateSize(_repeated_dataNodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataBlock other) {
      if (other == null) {
        return;
      }
      if (other.blockId_ != null) {
        if (blockId_ == null) {
          blockId_ = new global::ClientProto.UUID();
        }
        BlockId.MergeFrom(other.BlockId);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      dataNodes_.Add(other.dataNodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (blockId_ == null) {
              blockId_ = new global::ClientProto.UUID();
            }
            input.ReadMessage(blockId_);
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            dataNodes_.AddEntriesFrom(input, _repeated_dataNodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataNode : pb::IMessage<DataNode> {
    private static readonly pb::MessageParser<DataNode> _parser = new pb::MessageParser<DataNode>(() => new DataNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientProto.ClientprotoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNode(DataNode other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      ipAddress_ = other.ipAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNode Clone() {
      return new DataNode(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::ClientProto.UUID id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ClientProto.UUID Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ipAddress" field.</summary>
    public const int IpAddressFieldNumber = 2;
    private string ipAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (IpAddress != other.IpAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IpAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataNode other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::ClientProto.UUID();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::ClientProto.UUID();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            IpAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockMessage : pb::IMessage<BlockMessage> {
    private static readonly pb::MessageParser<BlockMessage> _parser = new pb::MessageParser<BlockMessage>(() => new BlockMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientProto.ClientprotoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockMessage(BlockMessage other) : this() {
      blockInfo_ = other.blockInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockMessage Clone() {
      return new BlockMessage(this);
    }

    /// <summary>Field number for the "blockInfo" field.</summary>
    public const int BlockInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ClientProto.BlockInfo> _repeated_blockInfo_codec
        = pb::FieldCodec.ForMessage(10, global::ClientProto.BlockInfo.Parser);
    private readonly pbc::RepeatedField<global::ClientProto.BlockInfo> blockInfo_ = new pbc::RepeatedField<global::ClientProto.BlockInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ClientProto.BlockInfo> BlockInfo {
      get { return blockInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blockInfo_.Equals(other.blockInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blockInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blockInfo_.WriteTo(output, _repeated_blockInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blockInfo_.CalculateSize(_repeated_blockInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockMessage other) {
      if (other == null) {
        return;
      }
      blockInfo_.Add(other.blockInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            blockInfo_.AddEntriesFrom(input, _repeated_blockInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockInfo : pb::IMessage<BlockInfo> {
    private static readonly pb::MessageParser<BlockInfo> _parser = new pb::MessageParser<BlockInfo>(() => new BlockInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientProto.ClientprotoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInfo(BlockInfo other) : this() {
      BlockId = other.blockId_ != null ? other.BlockId.Clone() : null;
      ipAddress_ = other.ipAddress_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInfo Clone() {
      return new BlockInfo(this);
    }

    /// <summary>Field number for the "blockId" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private global::ClientProto.UUID blockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ClientProto.UUID BlockId {
      get { return blockId_; }
      set {
        blockId_ = value;
      }
    }

    /// <summary>Field number for the "ipAddress" field.</summary>
    public const int IpAddressFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_ipAddress_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> ipAddress_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> IpAddress {
      get { return ipAddress_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BlockId, other.BlockId)) return false;
      if(!ipAddress_.Equals(other.ipAddress_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (blockId_ != null) hash ^= BlockId.GetHashCode();
      hash ^= ipAddress_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (blockId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BlockId);
      }
      ipAddress_.WriteTo(output, _repeated_ipAddress_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (blockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockId);
      }
      size += ipAddress_.CalculateSize(_repeated_ipAddress_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockInfo other) {
      if (other == null) {
        return;
      }
      if (other.blockId_ != null) {
        if (blockId_ == null) {
          blockId_ = new global::ClientProto.UUID();
        }
        BlockId.MergeFrom(other.BlockId);
      }
      ipAddress_.Add(other.ipAddress_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (blockId_ == null) {
              blockId_ = new global::ClientProto.UUID();
            }
            input.ReadMessage(blockId_);
            break;
          }
          case 18: {
            ipAddress_.AddEntriesFrom(input, _repeated_ipAddress_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockData : pb::IMessage<BlockData> {
    private static readonly pb::MessageParser<BlockData> _parser = new pb::MessageParser<BlockData>(() => new BlockData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientProto.ClientprotoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockData(BlockData other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockData Clone() {
      return new BlockData(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockData other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataNodeAddresses : pb::IMessage<DataNodeAddresses> {
    private static readonly pb::MessageParser<DataNodeAddresses> _parser = new pb::MessageParser<DataNodeAddresses>(() => new DataNodeAddresses());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataNodeAddresses> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientProto.ClientprotoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNodeAddresses() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNodeAddresses(DataNodeAddresses other) : this() {
      ipAddress_ = other.ipAddress_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataNodeAddresses Clone() {
      return new DataNodeAddresses(this);
    }

    /// <summary>Field number for the "ipAddress" field.</summary>
    public const int IpAddressFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_ipAddress_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> ipAddress_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> IpAddress {
      get { return ipAddress_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataNodeAddresses);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataNodeAddresses other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ipAddress_.Equals(other.ipAddress_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ipAddress_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ipAddress_.WriteTo(output, _repeated_ipAddress_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ipAddress_.CalculateSize(_repeated_ipAddress_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataNodeAddresses other) {
      if (other == null) {
        return;
      }
      ipAddress_.Add(other.ipAddress_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ipAddress_.AddEntriesFrom(input, _repeated_ipAddress_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UUID : pb::IMessage<UUID> {
    private static readonly pb::MessageParser<UUID> _parser = new pb::MessageParser<UUID>(() => new UUID());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UUID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientProto.ClientprotoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID(UUID other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID Clone() {
      return new UUID(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UUID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UUID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UUID other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Path : pb::IMessage<Path> {
    private static readonly pb::MessageParser<Path> _parser = new pb::MessageParser<Path>(() => new Path());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Path> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientProto.ClientprotoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path(Path other) : this() {
      fullpath_ = other.fullpath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path Clone() {
      return new Path(this);
    }

    /// <summary>Field number for the "fullpath" field.</summary>
    public const int FullpathFieldNumber = 1;
    private string fullpath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fullpath {
      get { return fullpath_; }
      set {
        fullpath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Path);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Path other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fullpath != other.Fullpath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fullpath.Length != 0) hash ^= Fullpath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fullpath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fullpath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fullpath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fullpath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Path other) {
      if (other == null) {
        return;
      }
      if (other.Fullpath.Length != 0) {
        Fullpath = other.Fullpath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Fullpath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusResponse : pb::IMessage<StatusResponse> {
    private static readonly pb::MessageParser<StatusResponse> _parser = new pb::MessageParser<StatusResponse>(() => new StatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientProto.ClientprotoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse(StatusResponse other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse Clone() {
      return new StatusResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::ClientProto.StatusResponse.Types.StatusType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ClientProto.StatusResponse.Types.StatusType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::ClientProto.StatusResponse.Types.StatusType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StatusResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StatusType {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("Fail")] Fail = 1,
        [pbr::OriginalName("Ready")] Ready = 2,
      }

    }
    #endregion

  }

  public sealed partial class ListOfNodes : pb::IMessage<ListOfNodes> {
    private static readonly pb::MessageParser<ListOfNodes> _parser = new pb::MessageParser<ListOfNodes>(() => new ListOfNodes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListOfNodes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientProto.ClientprotoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOfNodes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOfNodes(ListOfNodes other) : this() {
      blockId_ = other.blockId_;
      nodeId_ = other.nodeId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOfNodes Clone() {
      return new ListOfNodes(this);
    }

    /// <summary>Field number for the "blockId" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private string blockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockId {
      get { return blockId_; }
      set {
        blockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_nodeId_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> nodeId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NodeId {
      get { return nodeId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListOfNodes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListOfNodes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockId != other.BlockId) return false;
      if(!nodeId_.Equals(other.nodeId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockId.Length != 0) hash ^= BlockId.GetHashCode();
      hash ^= nodeId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BlockId);
      }
      nodeId_.WriteTo(output, _repeated_nodeId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlockId);
      }
      size += nodeId_.CalculateSize(_repeated_nodeId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListOfNodes other) {
      if (other == null) {
        return;
      }
      if (other.BlockId.Length != 0) {
        BlockId = other.BlockId;
      }
      nodeId_.Add(other.nodeId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BlockId = input.ReadString();
            break;
          }
          case 18: {
            nodeId_.AddEntriesFrom(input, _repeated_nodeId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListOfContents : pb::IMessage<ListOfContents> {
    private static readonly pb::MessageParser<ListOfContents> _parser = new pb::MessageParser<ListOfContents>(() => new ListOfContents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListOfContents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientProto.ClientprotoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOfContents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOfContents(ListOfContents other) : this() {
      fileName_ = other.fileName_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOfContents Clone() {
      return new ListOfContents(this);
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_fileName_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> fileName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FileName {
      get { return fileName_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListOfContents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListOfContents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fileName_.Equals(other.fileName_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fileName_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fileName_.WriteTo(output, _repeated_fileName_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fileName_.CalculateSize(_repeated_fileName_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListOfContents other) {
      if (other == null) {
        return;
      }
      fileName_.Add(other.fileName_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fileName_.AddEntriesFrom(input, _repeated_fileName_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewFile : pb::IMessage<NewFile> {
    private static readonly pb::MessageParser<NewFile> _parser = new pb::MessageParser<NewFile>(() => new NewFile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientProto.ClientprotoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewFile(NewFile other) : this() {
      fullpath_ = other.fullpath_;
      address_ = other.address_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewFile Clone() {
      return new NewFile(this);
    }

    /// <summary>Field number for the "fullpath" field.</summary>
    public const int FullpathFieldNumber = 1;
    private string fullpath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fullpath {
      get { return fullpath_; }
      set {
        fullpath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private string address_ = "";
    /// <summary>
    /// s3 object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fullpath != other.Fullpath) return false;
      if (Address != other.Address) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fullpath.Length != 0) hash ^= Fullpath.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fullpath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fullpath);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fullpath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fullpath);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewFile other) {
      if (other == null) {
        return;
      }
      if (other.Fullpath.Length != 0) {
        Fullpath = other.Fullpath;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Fullpath = input.ReadString();
            break;
          }
          case 18: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
